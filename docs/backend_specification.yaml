swagger: '2.0'
info:
  description: This is a simple specification of the PyDash.IO backend API.
  version: 0.0.1
  title: PyDash.IO
  contact:
    email: w-m@wmcode.nl
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: pydash.io
basePath: /
tags:
  - name: user
    description: Operations about a user
  - name: dashboards
    description: Operations concerning dashboards
schemes:
  - http
produces:
  - application/json
paths:
  /api/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            type: object
            properties:
              message:
                type: string
              user:
                $ref: '#/definitions/User'
        '400':
          description: Missing username or password
          schema:
            type: object
            properties:
              message:
                type: string
        '401':
          description: Invalid username/password supplied
          schema:
            type: object
            properties:
              message:
                type: string
  /api/logout:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      parameters: []
      responses:
        '200':
          description: Successful operation
          schema:
            type: object
            properties:
              message:
                type: string
        '401':
          description: User was not logged in
          schema:
            type: object
            properties:
              message:
                type: string
  /api/dashboards:
    get:
      tags:
        - dashboards
      summary: Lists the dashboards of the current user in session
      parameters: []
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Simple_Dashboard'
  '/api/dashboards/{dashboard_id}':
    get:
      tags:
        - dashboards
      summary: Lists detailed information of a single dashboard
      parameters:
        - name: dashboard_id
          in: path
          description: ID of the dashboard to return
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Dashboard'
definitions:
  Simple_Dashboard:
    type: object
    properties:
      id:
        type: string
        format: uuid
        example: abcdef12-3456-7890-abcd-123456789abc
      url:
        type: string
        example: 'https://pydash.io/'
      endpoints:
        type: array
        items:
          $ref: '#/definitions/Endpoint'
  Dashboard:
    type: object
    properties:
      id:
        type: string
        format: uuid
        example: abcdef12-3456-7890-abcd-123456789abc
      url:
        type: string
        example: 'https://pydash.io/'
      aggregator:
        $ref: '#/definitions/Aggregator'
      endpoints:
        type: array
        items:
          $ref: '#/definitions/Endpoint'
  Aggregator:
    type: object
    properties: 
      total_visits: 
        type: string
        example: '42'
      total_execution_time: 
        type: string
        example: '212'
      average_execution_time: 
        type: string
        example: '0.002'
      visits_per_day: 
        type: string
        example: '27'
      visits_per_ip: 
        type: string
        example: '11'
      unique_visitors: 
        type: string
        example: '69'
      unique_visitors_per_day: 
        type: string
        example: '3'
  Endpoint:
    type: object
    properties:
      name:
        type: string
        example: my.endpoint.name
      enabled:
        type: boolean
  User:
    type: object
    properties:
      id:
        type: string
        format: uuid
        example: abcdef12-3456-7890-abcd-123456789abc
      name:
        type: string
